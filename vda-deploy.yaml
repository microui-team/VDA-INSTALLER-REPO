

x-superset-image: &superset-image microuidigital/superset-app:latest
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./vda:/app/docker
  - superset_home:/app/superset_home

version: '3'
services:
  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - vda

  db:
    env_file: vda/.env-non-dev
    image: postgres:14
    container_name: superset_db
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data
    networks:
      - vda

  superset:
    env_file: vda/.env-non-dev
    image: *superset-image
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 8088:8088
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    networks:
      - vda

  superset-init:
    image: *superset-image
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: vda/.env-non-dev
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks:
      - vda

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: vda/.env-non-dev
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test: ["CMD-SHELL", "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME"]
    networks:
      - vda

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: vda/.env-non-dev
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks:
      - vda

  neo4j:
      image: neo4j:3.5.26
      container_name: neo4j_amundsen
      environment:
        - NEO4J_AUTH=neo4j/test
      restart: unless-stopped
      ulimits:
        nofile:
          soft: 40000
          hard: 40000
      #ports:
      #    - 7474:7474
      #    - 7687:7687
      volumes:
          - ./data/docker/neo4j/conf:/var/lib/neo4j/conf
          - ./data/docker/neo4j/plugins:/var/lib/neo4j/plugins
          - ./data/backup:/backup
          - neo4j_data:/data
      networks:
        - vda
  elasticsearch:
      image: elasticsearch:8.0.0
      container_name: es_amundsen
      restart: unless-stopped
      #ports:
      #    - 9200:9200
      volumes:
        - es_data:/usr/share/elasticsearch/data
        #- es_data:/var/lib/elasticsearch/data
      networks:
        - vda
      deploy:
          resources:
            limits:
              memory: 2G
            reservations:
              memory: 500M    
      ulimits:
        nofile:
          soft: 65536
          hard: 65536
      environment:
        - discovery.type=single-node
        - xpack.security.enabled=false
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
        - cluster.routing.allocation.disk.threshold_enabled=false
  amundsensearch:
      image: amundsendev/amundsen-search:4.0.2
      container_name: amundsensearch
      restart: unless-stopped
      #ports:
      #  - 5000:5000
      depends_on:
        - elasticsearch
      networks:
        - vda
      environment:
        - PROXY_ENDPOINT=es_amundsen
      command: gunicorn -w 2 --bind :5000 search_service.search_wsgi
  amundsenmetadata:
      image: amundsendev/amundsen-metadata:3.11.0
      container_name: amundsenmetadata
      restart: unless-stopped
      depends_on:
        - neo4j
      #ports:
      #  - 5001:5000
      networks:
        - vda
      environment:
         - PROXY_HOST=bolt://neo4j_amundsen
      command: gunicorn -w 2 --bind :5000 metadata_service.metadata_wsgi
  amundsenfrontend:
      image: amundsendev/amundsen-frontend:4.2.0
      container_name: amundsenfrontend
      restart: unless-stopped
      depends_on:
        - amundsenmetadata
        - amundsensearch
      #ports:
      #- 5002:5000
      networks:
        - vda
      environment:
        - SEARCHSERVICE_BASE=http://amundsensearch:5000
        - METADATASERVICE_BASE=http://amundsenmetadata:5000
        # Only for easy config-less Quickstart bookmark evalutation. `TestConfig` extends ordinary `LocalConfig` by
        # defining `AUTH_USER_METHOD` to a hardcoded dummy user in `amundsen_application.tests.test_utils.get_test_user()`
        # See further docs in https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/configuration.md#flask
        # and https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/configuration.md#authentication
        - FRONTEND_SVC_CONFIG_MODULE_CLASS=amundsen_application.config.TestConfig
      command: gunicorn -w 2 --bind :5000 amundsen_application.wsgi

  rabbitmq:
    image: rabbitmq:3.12-management
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=whiteklay
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - vda

  postgres:
    image: postgres
    restart: unless-stopped
    env_file: vda/.env-vda
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #ports:
    #  - "5432:5432"
    networks:
      - vda
  
  keycloak:
    image: ${IMAGE_REGISTRY}/keycloak:local
    restart: unless-stopped
    env_file: vda/.env-vda
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USERNAME}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8080:8080"
    networks:
      - vda

  nginx:
    image: ${IMAGE_REGISTRY}/nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - vda
    depends_on:
      - server
      - client

  client:
    image: ${IMAGE_REGISTRY}/vda-client:${GIT_SHA}
    restart: unless-stopped
    #ports:
    #  - "5000:5000"
    depends_on:
      - server
    environment:
      - VITE_SERVER_URL=/api/
    networks:
      - vda

  server:
    image: ${IMAGE_REGISTRY}/vda-server:${GIT_SHA}
    restart: unless-stopped
    env_file: vda/.env-vda
    environment:
      - KEYCLOAK_URL=${KEYCLOAK_URL}
      - KEYCLOAK_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - DATALOADER_URL=http://api-metadata:8000
      - DATASEARCH_URL=http://amundsenfrontend:5000
      - LLMAPI_URL=http://api-llmapi:8081
      - SUPERSET_URL=http://api-superset:8082
      - ORIG_SUPERSET_URL=${ORIG_SUPERSET_URL}
      - ORIG_SUPERSET_TOKEN=${ORIG_SUPERSET_TOKEN}
      - AMUNDSEN_METADATA_URL=http://amundsenmetadata:5000
      - UPLOAD_DIRECTORY=/uploads/
      - MESSAGE_QUEUE_NAME=amundsen_queue
      - MESSAGE_RESPONSE_QUEUE_NAME=amundsen_response_queue
      - MESSAGE_QUEUE_HOST=${MESSAGE_QUEUE_HOST}
      - UPLOAD_STORAGE=""
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - REALM_NAME=${REALM_NAME}
      - SENTENCE_TRANSFORMER_URL=http://sentencetransformer:8084
      - DATA_INGESTION_URL=${DATA_INGESTION_URL}
      - GIT_CONTROL_URL=http://git-control-app:8008
      - GIT_TOKEN=${GIT_TOKEN}
      - GIT_REPONAME=${GIT_REPONAME}
    #ports:
    #  - "4000:4000"
    volumes:
      - ./uploads:/uploads
    networks:
      - vda
    depends_on:
      - postgres
      - rabbitmq
      - keycloak
      - api-superset
      - api-llmapi
      - api-metadata


  api-superset:
    image: ${IMAGE_REGISTRY}/vda-superset:${GIT_SHA}
    restart: unless-stopped
    env_file: vda/.env-vda
    environment:
      - SUPERSET_URL=${ORIG_SUPERSET_URL}
      - SUPERSET_USER=${SUPERSET_USER}
      - SUPERSET_PASSWORD=${SUPERSET_PASSWORD}
      - ELASTICSEARCH_URL=http://es_amundsen:9200
      - PORT=8082
    #ports:
    #  - "8082:8082"
    networks:
      - vda


  api-metadata:
    image: ${IMAGE_REGISTRY}/vda-metadata:${GIT_SHA}
    restart: unless-stopped
    env_file: vda/.env-vda
    environment:
      - ELASTICSEARCH_URL=es_amundsen
      - NEO4J_URL=bolt://neo4j_amundsen:7687
      - NEO4J_USER_NAME=neo4j
      - NEO4J_PASSWORD=test
      - NEO4J_FRONTEND_URL=http://neo4j_amundsen:7474
      - MESSAGE_RESPONSE_QUEUE_NAME=${MESSAGE_RESPONSE_QUEUE_NAME}
      - MESSAGE_QUEUE_NAME=${MESSAGE_QUEUE_NAME}
      - MESSAGE_QUEUE_PORT=5672
      - MESSAGE_QUEUE_USER=${MESSAGE_QUEUE_USER}
      - MESSAGE_QUEUE_PASSWORD=${MESSAGE_QUEUE_PASSWORD}
      - MESSAGE_QUEUE_HOST=${MESSAGE_QUEUE_HOST}
      - SENTENCE_TRANSFORMER_URL=http://sentencetransformer:8084
    #ports:
    #  - "8000:8000"
    networks:
      - vda

  
  api-llmapi:
    image: ${IMAGE_REGISTRY}/vda-llmapi:${GIT_SHA}
    restart: unless-stopped
    env_file: vda/.env-vda
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACEHUB_API_TOKEN=${HUGGINGFACEHUB_API_TOKEN}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - ELASTICSEARCH_URL=http://es_amundsen:9200
    #ports:
    #  - "8081:8081"
    volumes:
      - ./uploads:/uploads    
    networks:
      - vda

  sentencetransformer:
    image: ${IMAGE_REGISTRY}/vda-sentencetransformer:${GIT_SHA}
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_URL=http://es_amundsen:9200
    #ports:
    #  - "8084:8084"
    networks:
      - vda

  git-control-app:
    image: ${IMAGE_REGISTRY}/vda-gitcontrolapp:latest
    restart: unless-stopped
    env_file: vda/.env-vda
    environment:
      - TOKEN=${GIT_TOKEN}
    #ports:
    #  - "8009:8008"
    networks:
      - vda



networks:
  vda:

volumes:
  es_data:
  neo4j_data:
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false